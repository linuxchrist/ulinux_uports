#!/usr/bin/env perl

use File::Basename;
use Term::ANSIColor qw(:constants);

$uports="/mnt/uports";
$src="$uports/sources";
$system="$uports/ulinux";
$tools="$system/utools";
$crosstools="$system/utoolscross";
$utools="/utools";
$utoolscross="/utoolscross";
$ulinux="/ulinux";
$pkgdir="$uports/pkgs";
$staging="$uports/staging";
$installdir="$uports/install";
$tpath = '/utoolscross/bin:utools/bin:ulinux/bin:';
$spath = $ENV{'PATH'};
$upath = ($tpath . $spath );
$ENV{'PATH'} = $upath;

if (! -d $uports) {mkdir($uports);}
if (! -d $src) {mkdir($src);}
if (! -d $system) {mkdir($system);}
if (! -d $tools) {mkdir($tools);}
if (! -d $crosstools) {mkdir($crosstools);}
if (! -d $pkgdir) {mkdir($pkgdir);}
if (! -d $staging) {mkdir($staging);}
if (! -d $installdir) {mkdir($installdir);}
if (! -l $utools) {system('ln -sv $tools /');}
if (! -l $utoolscross) {system('ln -sv $crosstools /');}
if (! -l $ulinux) {system('ln -sv $system /');}

sub checkconfig {
	$cyan = CYAN;
	print($cyan, '-' x 20, 'uports system config', '-' x 20, "\n");
	if (-d $uports) {print "$uports\n";}
	if (-d $src) {push @udirs, "sources ";}
	if (-d $system) {push @udirs, "ulinux ";}
	if (-d $pkgdir) {push @udirs, "pkgdir ";}
	if (-d $staging) {push @udirs, "staging ";}
	if (-d $installdir) {push @udirs, "installdir ";}
	if (-d $tools) {push @sdirs, "ulinux/utools ";}
        if (-d $crosstools) {push @sdirs, "ulinux/utoolscross ";}
	print(BOLD BLUE, @udirs, "\n", @sdirs, "\n", RESET);
	if (-l $utools) {print(BOLD CYAN, "$utools", BOLD GREEN, " -> ", RESET, CYAN, "$tools\n", RESET);}
	if (-l $utoolscross) {print(BOLD CYAN, "$utoolscross", BOLD GREEN, " -> ", RESET, CYAN, "$crosstools\n", RESET);}
	if (-l $ulinux) {print(BOLD CYAN, "$ulinux", BOLD GREEN, " -> ", RESET, CYAN, "$system\n", RESET);}
	print($cyan, "PATH=", BOLD BLUE, $ENV{'PATH'}, "\n", RESET);
	print($cyan, "-" x 60, "\n", RESET);
}

$osrel = `cat /etc/os-release | head -n1`;
if ( $osrel =~ m/Debian/) {
	`bash --version | head -n1 | cut -d" " -f2-4` or push @aptlist, 'bash ';
	$sh = readlink("/bin/sh");
	if ( $sh !~ m/bash/) {
		system("rm /bin/sh");
		system("ln -s bash /bin/sh");
		print "/bin/sh -> $sh", "\n";}
	`ld --version | head -n1 | cut -d" " -f3-` or push @aptlist, 'binutils ';
	`bison --version | head -n1` or push @aptlist, 'bison ';
	if ( ! -l "/usr/bin/yacc" ) { push @aptlist, "byacc ";}
	`bzip2 --version 2>&1 | head -n1 | cut -d" " -f1,6-` or push @aptlist, 'bzip2 ';
	`chown --version | head -n1` or push @aptlist, 'coreutils ';
	`diff --version | head -n1` or push @aptlist, 'diffutils ';
	`find --version | head -n1` or push @aptlist, 'findutils ';
	`gawk --version | head -n1` or push @aptlist, 'gawk ';
	`gcc --version | head -n1` or push @aptlist, 'gcc ';
	`g++ --version | head -n1` or push @aptlist, 'g++ ';
	`grep --version | head -n1` or push @aptlist, 'grep ';
	`gzip --version | head -n1` or push @aptlist, 'gzip ';
	`m4 --version | head -n1` or push @aptlist, 'm4 ';
	`make --version | head -n1` or push @aptlist, 'make ';
	`patch --version | head -n1` or push @aptlist, 'patch ';
	`perl -V:version` or push @aptlist, 'perl ';
	`sed --version | head -n1` or push @aptlist, 'sed ';
	`tar --version | head -n1` or push @aptlist, 'tar ';
	`makeinfo --version | head -n1` or push @aptlist, 'texinfo ';
	`xz --version | head -n1` or push @aptlist, 'xz-utils ';
	`wget --version | head -n1` or push @aptlist, 'wget ';
	if(exists($aptlist[0])){system("apt install @aptlist");}
}

$info = CYAN;
$equal = GREEN;
$pkgvar = YELLOW;
sub checkpkginfo {
print($info, "\$pkgname", $equal, "=", $pkgvar, "$pkgname\n", RESET);
print($info, "\$pkgver", $equal, "=", $pkgvar, "$pkgver\n", RESET);
print($info, "\$pkgrel", $equal, "=", $pkgvar, "$pkgrel\n", RESET);
print($info, "\$maintainer", $equal, "=", $pkgvar, "$maintainer\n", RESET);
print($info, "\$description", $equal, "=", $pkgvar, "$description\n", RESET);
print($info, "\$homepage", $equal, "=", $pkgvar, "$homepage\n", RESET);
print($info, "\$sources", $equal, "=", $pkgvar, "$sources\n", RESET);
print($info, "\$arch", $equal, "=", $pkgvar, "$arch\n", RESET);
print($info, "\$depends", $equal, "=", $pkgvar, "$depends\n", RESET);
print($info, "\$comment", $equal, "=", $pkgvar, "$comment\n", RESET);
}

sub checksources {
foreach my $link (@sources) {
        $file = basename($link);
	push @files, $file;
        unless (-e "$src/$file") {
        system("wget -P $src $link");}
	}
print "@files\n";
}
sub extractfiles {
	#print "@files\n";
}

1;
