#!/usr/bin/env perl -w

use File::Basename;
use Term::ANSIColor qw(:constants);

$uports="/mnt/uports";
$src="$uports/sources";
$system="$uports/ulinux";
$tools="$system/utools";
$crosstools="$system/utoolscross";
$utools="/utools";
$utoolscross="/utoolscross";
$ulinux="/ulinux";
$pkgdir="$uports/pkgs";
$staging="$uports/staging";
$installdir="$uports/install";
$tpath = '/utoolscross/bin:utools/bin:ulinux/bin:';
$spath = $ENV{'PATH'};
$upath = ($tpath . $spath );
$ENV{'PATH'} = $upath;

$cyan = CYAN;
print($cyan, "-----------------uports system config----------------------------\n");
if (! -d "$uports") {mkdir($uports);}elsif (-d "$uports") {print "$uports\n"; }
if (! -d "$src") {mkdir($src);}elsif (-d "$src") {print "$src\n"; }
if (! -d "$system") {mkdir($system);}elsif (-d "$system") {print "$system\n"; }
if (! -d "$tools") {mkdir($tools);}elsif (-d "$tools") {print "$tools\n"; }
if (! -d "$crosstools") {mkdir($crosstools);}elsif (-d "$crosstools") {print "$crosstools\n"; }
if (! -d "$pkgdir") {mkdir($pkgdir);}elsif (-d "$pkgdir") {print "$pkgdir\n"; }
if (! -d "$staging") {mkdir($staging);}elsif (-d "$staging") {print "$staging\n"; }
if (! -d "$installdir") {mkdir($installdir);}elsif (-d "$installdir") {print "$installdir\n"; }
if (! -l "$utools") {system("ln -sv $tools /");}elsif (-l "$utools") {print "$utools -> $tools\n"; }
if (! -l "$utoolscross") {system("ln -sv $crosstools /");}elsif (-l "$utoolscross") {print "$utoolscross -> $crosstools\n"; }
if (! -l "$ulinux") {system("ln -sv $system /");}elsif (-l "$ulinux") {print "$ulinux -> $system\n"; }
print("PATH=", $ENV{'PATH'}, "\n");
print($cyan, "-----------------------------------------------------------------\n", RESET);

$info = CYAN;
$equal = GREEN;
$pkgvar = YELLOW;
sub checkpkginfo {
print($info, "\$pkgname", $equal, "=", $pkgvar, "$pkgname\n");
print($info, "\$pkgver", $equal, "=", $pkgvar, "$pkgver\n");
print($info, "\$pkgrel", $equal, "=", $pkgvar, "$pkgrel\n");
print($info, "\$maintainer", $equal, "=", $pkgvar, "$maintainer\n");
print($info, "\$description", $equal, "=", $pkgvar, "$description\n");
print($info, "\$homepage", $equal, "=", $pkgvar, "$homepage\n");
print($info, "\$sources", $equal, "=", $pkgvar, "$sources\n");
print($info, "\$arch", $equal, "=", $pkgvar, "$arch\n");
print($info, "\$depends", $equal, "=", $pkgvar, "$depends\n");
print($info, "\$comment", $equal, "=", $pkgvar, "$comment\n");
}

sub check_command_exists {
    my $check = `sh -c '$_[0] --version'`;
    return $check;
}
check_command_exists 'wget' or die "requires wget";

sub checksources {
foreach my $link (@sources) {
        $file = basename($link);
        unless (-e "$src/$file") {
        system("wget -P $src $link");}
	}
}
